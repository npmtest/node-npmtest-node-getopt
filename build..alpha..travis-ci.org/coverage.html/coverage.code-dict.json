{"/home/travis/build/npmtest/node-npmtest-node-getopt/test.js":"/* istanbul instrument in package npmtest_node_getopt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-getopt/lib.npmtest_node_getopt.js":"/* istanbul instrument in package npmtest_node_getopt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_getopt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_getopt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-getopt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-getopt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_getopt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_getopt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_getopt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_getopt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_getopt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_getopt.__dirname + '/lib.npmtest_node_getopt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-getopt/node_modules/node-getopt/index.js":"module.exports = require(__dirname + '/lib/getopt.js');\n","/home/travis/build/npmtest/node-npmtest-node-getopt/node_modules/node-getopt/lib/getopt.js":"// Generated by ToffeeScript 1.4.0\n(function() {\n  var Getopt, ParsedOption,\n    __hasProp = {}.hasOwnProperty,\n    __matches = null;\n\n  ParsedOption = (function() {\n\n    function ParsedOption(argv, options) {\n      this.argv = argv;\n      this.options = options;\n    }\n\n    ParsedOption.prototype.empty = function() {\n      var k, v, _ref;\n      if (this.argv.length) {\n        return false;\n      }\n      _ref = this.options;\n      for (k in _ref) {\n        if (!__hasProp.call(_ref, k)) continue;\n        v = _ref[k];\n        return false;\n      }\n      return true;\n    };\n\n    return ParsedOption;\n\n  })();\n\n  Getopt = (function() {\n\n    Getopt.HAS_ARGUMENT = true;\n\n    Getopt.NO_ARGUMENT = false;\n\n    Getopt.MULTI_SUPPORTED = true;\n\n    Getopt.SINGLE_ONLY = false;\n\n    Getopt.VERSION = '0.2.3';\n\n    function Getopt(options) {\n      var comment, definition, has_argument, long_name, multi_supported, name, option, optional, short_name, _i, _len, _ref;\n      this.options = options;\n      this.short_options = {};\n      this.long_options = {};\n      this.long_names = [];\n      this.events = {};\n      this.event_names = [];\n      this.errorFunc = function(e) {\n        console.info(e.message);\n        return process.exit(1);\n      };\n      if (process.argv[1]) {\n        this.help = \"Usage: node \" + (process.argv[1].match(/(?:.*[\\/\\\\])?(.*)$/)[1]) + \"\\n\\n[[OPTIONS]]\\n\";\n      } else {\n        this.help = \"[[OPTIONS]]\";\n      }\n      _ref = this.options;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        option = _ref[_i];\n        short_name = option[0], definition = option[1], comment = option[2];\n        if (comment == null) {\n          comment = '';\n        }\n        if (definition == null) {\n          definition = '';\n        }\n        if (short_name == null) {\n          short_name = '';\n        }\n        (__matches = definition.match(/^([\\w\\-]*)/));\n        long_name = __matches[1];\n        has_argument = definition.indexOf('=') !== -1;\n        multi_supported = definition.indexOf('+') !== -1;\n        optional = /\\[=.*?\\]/.test(definition);\n        long_name = long_name.trim();\n        short_name = short_name.trim();\n        if (optional && short_name) {\n          throw new Error('optional argument can only work with long option');\n        }\n        if (!long_name) {\n          long_name = short_name;\n        }\n        name = long_name;\n        if (long_name === '') {\n          throw new Error(\"empty option found. the last option name is \" + (this.long_names.slice(-1)));\n        }\n        if (this.long_options[long_name] == null) {\n          this.long_names.push(long_name);\n          this.long_options[long_name] = {\n            name: name,\n            short_name: short_name,\n            long_name: long_name,\n            has_argument: has_argument,\n            multi_supported: multi_supported,\n            comment: comment,\n            optional: optional,\n            definition: definition\n          };\n        } else {\n          throw new Error(\"option \" + long_name + \" redefined.\");\n        }\n        if (short_name !== '') {\n          if (short_name.length !== 1) {\n            throw new Error('short option must be single characters');\n          }\n          this.short_options[short_name] = this.long_options[long_name];\n        }\n      }\n      this;\n    }\n\n    Getopt.prototype.on = function(name, cb) {\n      this.events[name] = cb;\n      this.event_names.push(name);\n      return this;\n    };\n\n    Getopt.prototype.emit = function(name, cb) {\n      if (this.events[name]) {\n        return this.events[name].call(this, this.parsedOption.argv, this.parsedOption.options);\n      } else {\n        throw new Error(\"Getopt trigger '\" + name + \"' is not found\");\n      }\n    };\n\n    Getopt.prototype.trigger_events_ = function() {\n      var name, options, _i, _len, _ref;\n      options = this.parsedOption.options;\n      _ref = this.event_names;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        name = _ref[_i];\n        if (options[name] != null) {\n          this.emit(name);\n        }\n      }\n      return this;\n    };\n\n    Getopt.prototype.save_option_ = function(options, option, argv) {\n      var name, names, value, _i, _len, _ref;\n      if (option.has_argument) {\n        if (argv.length === 0) {\n          throw new Error(\"option \" + option.long_name + \" need argument\");\n        }\n        value = argv.shift();\n      } else {\n        value = true;\n      }\n      names = [option.name];\n      for (_i = 0, _len = names.length; _i < _len; _i++) {\n        name = names[_i];\n        if (option.multi_supported) {\n          if ((_ref = options[name]) == null) {\n            options[name] = [];\n          }\n          options[name].push(value);\n        } else {\n          options[name] = value;\n        }\n      }\n      return this;\n    };\n\n    Getopt.prototype.parse = function(argv) {\n      var arg, i, long_name, option, rt_argv, rt_options, short_name, short_names, value, _i, _len;\n      try {\n        argv = argv.slice(0);\n        rt_options = {};\n        rt_argv = [];\n        while ((arg = argv.shift()) != null) {\n          if ((__matches = arg.match(/^-(\\w[\\w\\-]*)/))) {\n            short_names = __matches[1];\n            for (i = _i = 0, _len = short_names.length; _i < _len; i = ++_i) {\n              short_name = short_names[i];\n              option = this.short_options[short_name];\n              if (!option) {\n                throw new Error(\"invalid option \" + short_name);\n              }\n              if (option.has_argument) {\n                if (i < arg.length - 2) {\n                  argv.unshift(arg.slice(i + 2));\n                }\n                this.save_option_(rt_options, option, argv);\n                break;\n              } else {\n                this.save_option_(rt_options, option, argv);\n              }\n            }\n          } else if ((__matches = arg.match(/^--(\\w[\\w\\-]*)((?:=.*)?)$/))) {\n            long_name = __matches[1];\n            value = __matches[2];\n            option = this.long_options[long_name];\n            if (!option) {\n              throw new Error(\"invalid option \" + long_name);\n            }\n            if (value !== '') {\n              value = value.slice(1);\n              argv.unshift(value);\n            } else if (option.optional) {\n              argv.unshift('');\n            }\n            this.save_option_(rt_options, option, argv);\n          } else if (arg === '--') {\n            rt_argv = rt_argv.concat(argv);\n            break;\n          } else {\n            rt_argv.push(arg);\n          }\n        }\n      } catch (e) {\n        this.errorFunc(e);\n      }\n      this.parsedOption = new ParsedOption(rt_argv, rt_options);\n      this.trigger_events_();\n      return this.parsedOption;\n    };\n\n    Getopt.prototype.parse_system = function() {\n      return this.parse(process.argv.slice(2));\n    };\n\n    Getopt.prototype.parseSystem = function() {\n      return this.parse_system();\n    };\n\n    Getopt.prototype.setHelp = function(help) {\n      this.help = help;\n      return this;\n    };\n\n    Getopt.prototype.getHelp = function() {\n      var comment, definition, long_name, opt, option, options, short_name, strs, ws, _i, _len, _ref;\n      ws = [];\n      options = [];\n      _ref = this.long_names;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        long_name = _ref[_i];\n        option = this.long_options[long_name];\n        short_name = option.short_name, long_name = option.long_name, comment = option.comment, definition = option.definition;\n        if (short_name && short_name === long_name) {\n          opt = \"-\" + short_name;\n        } else if (short_name) {\n          opt = \"-\" + short_name + \", --\" + definition;\n        } else {\n          opt = \"    --\" + definition;\n        }\n        ws[0] = Math.max(ws[0] >> 0, opt.length);\n        options.push([opt, comment]);\n      }\n      strs = (function() {\n        var _j, _len1, _results;\n        _results = [];\n        for (_j = 0, _len1 = options.length; _j < _len1; _j++) {\n          option = options[_j];\n          opt = option[0], comment = option[1];\n          while (opt.length < ws[0]) {\n            opt += ' ';\n          }\n          _results.push(\"  \" + opt + \"  \" + comment);\n        }\n        return _results;\n      })();\n      return this.help.replace('[[OPTIONS]]', strs.join(\"\\n\"));\n    };\n\n    Getopt.prototype.showHelp = function() {\n      console.info(this.getHelp());\n      return this;\n    };\n\n    Getopt.prototype.bindHelp = function(help) {\n      if (help) {\n        this.setHelp(help);\n      }\n      this.on('help', function() {\n        this.showHelp();\n        return process.exit(0);\n      });\n      return this;\n    };\n\n    Getopt.prototype.getVersion = function() {\n      return Getopt.VERSION;\n    };\n\n    Getopt.prototype.error = function(errorFunc) {\n      this.errorFunc = errorFunc;\n      return this;\n    };\n\n    Getopt.getVersion = function() {\n      return this.VERSION;\n    };\n\n    Getopt.create = function(options) {\n      return new Getopt(options);\n    };\n\n    return Getopt;\n\n  })();\n\n  module.exports = Getopt;\n\n}).call(this);\n"}